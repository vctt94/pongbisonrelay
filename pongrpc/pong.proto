syntax = "proto3";

option go_package = "grpc/pong";

package pong;

service PongGame {
  // pong game
  rpc SendInput (PlayerInput) returns (GameUpdate) {}
  rpc StartGameStream(StartGameStreamRequest) returns (stream GameUpdateBytes);
  rpc StartNtfnStream(StartNtfnStreamRequest) returns (stream NtfnStreamResponse);
  rpc UnreadyGameStream(UnreadyGameStreamRequest) returns (UnreadyGameStreamResponse);
  rpc SignalReadyToPlay(SignalReadyToPlayRequest) returns (SignalReadyToPlayResponse);
}

service PongWaitingRoom {
  // waiting room
  rpc GetWaitingRoom(WaitingRoomRequest) returns (WaitingRoomResponse);
  rpc GetWaitingRooms(WaitingRoomsRequest) returns (WaitingRoomsResponse);
  rpc CreateWaitingRoom(CreateWaitingRoomRequest) returns (CreateWaitingRoomResponse);
  rpc JoinWaitingRoom(JoinWaitingRoomRequest) returns (JoinWaitingRoomResponse);
  rpc LeaveWaitingRoom(LeaveWaitingRoomRequest) returns (LeaveWaitingRoomResponse);
}

// Referee service coordinating escrow and settlement
service PongReferee {
  // Escrow-first funding
  rpc OpenEscrow (OpenEscrowRequest) returns (OpenEscrowResponse);
  // SettlementStream streams the settlement process
  rpc SettlementStream(stream ClientMsg) returns (stream ServerMsg);
  // Winner fetches gamma and both presigs to finalize the exact winning draft
  rpc GetFinalizeBundle(GetFinalizeBundleRequest) returns (GetFinalizeBundleResponse);
}


// === Phase 1 streaming messages ===
message ClientMsg {
  string match_id = 1;
  oneof kind {
    Hello hello = 10;
    Ack ack = 12;
    // minimal handshake message carrying ack_digest and presigs.
    VerifyOk verify_ok = 13;
  }
}

message ServerMsg {
  string match_id = 1;
  oneof kind {
    NeedPreSigs req = 11;
    Info info = 13;
    // New handshake completion ack from server.
    ServerOk ok = 14;
  }
}

message Hello {
  string match_id = 1;
  bytes comp_pubkey = 2;  // 33B compressed pubkey (A_c/B_c)
  string client_version = 3;
}

message NeedPreSigs {
  string draft_tx_hex = 2;
  message PerInput {
    string input_id = 1;
    string redeem_script_hex = 2;
    string m_hex = 3;
    bytes  T_compressed = 4; // 33B
  }
  repeated PerInput inputs = 4;
}

// Client VERIFY_OK message: verifies draft, builds presigs, and includes ack digest.
message VerifyOk {
  bytes ack_digest = 1; // 32B BLAKE256(draft_tx_hex || canonical(inputs))
  repeated PreSig presigs = 2;
}

// Per-input pre-signature using minus variant and normalized R'.
message PreSig {
  string input_id = 1;
  bytes  RLine_compressed = 2; // 33B normalized (even-Y) R'
  bytes  sLine32 = 3;         // 32B little endian mod-n scalar
}

message Ack { string note = 1; }
message Info { string text = 1; }

// Server SERVER_OK message: acknowledges successful verification.
message ServerOk { bytes ack_digest = 1; }

// === Finalization bundle for winner ===
message GetFinalizeBundleRequest {
  string match_id = 1;   // "<wrID>|<hostUID>"
  string winner_uid = 2; // caller uid
}

message FinalizeInput {
  string input_id = 1;
  string redeem_script_hex = 2;
  bytes  RLine_compressed = 3;
  bytes  sLine32 = 4;
}

message GetFinalizeBundleResponse {
  string draft_tx_hex = 1; // exact winning branch draft
  bytes  gamma32 = 2;      // 32B gamma (normalized to even-Y T)
  repeated FinalizeInput inputs = 3; // one per vin in draft
}

message OpenEscrowRequest {
  string owner_uid = 1;
  bytes  comp_pubkey = 2;     // 33 bytes (compressed)
  uint64 bet_atoms = 3;
  uint32 csv_blocks = 4;
  bytes  payout_pubkey = 5; // 33B compressed pubkey address for payout
}

message OpenEscrowResponse {
  string escrow_id = 1;
  string deposit_address = 2;
  string pk_script_hex = 3;
}

message EscrowUTXO {
  string txid = 1;
  uint32 vout = 2;
  uint64 value = 3; // atoms
  string redeem_script_hex = 4;
  string pk_script_hex = 5;
  string owner = 6; // "A" or "B"
}



// Notification Messages
enum NotificationType {
  UNKNOWN = 0;
  MESSAGE = 1;
  GAME_START = 2;
  GAME_END = 3;
  OPPONENT_DISCONNECTED = 4;
  BET_AMOUNT_UPDATE = 5;
  PLAYER_JOINED_WR = 6;
  ON_WR_CREATED = 7;
  ON_PLAYER_READY = 8;
  ON_WR_REMOVED = 9;
  COUNTDOWN_UPDATE = 11;
  GAME_READY_TO_PLAY = 12;
  MATCH_ALLOCATED = 13;
}

message MatchAllocatedNtfn {
  string match_id = 1;
  string room_id = 2;
  uint64 bet_atoms = 3;
  uint32 csv_blocks = 4;
  bytes  a_comp = 5; // optional debug
  bytes  b_comp = 6; // optional debug
}

message UnreadyGameStreamRequest {
  string client_id = 1;
}

message UnreadyGameStreamResponse {}

message StartNtfnStreamRequest {
  string client_id = 1;
}

message NtfnStreamResponse {
  NotificationType notification_type = 1; // Type of the notification
  bool started = 2;
  string game_id = 3;
  string message = 4;  // message or additional details
  int64 betAmt = 5;
  int32 player_number = 6;  // Player 1 or Player 2
  string player_id = 7;
  string room_id = 8;
  WaitingRoom wr=9;
  bool ready = 10;
  MatchAllocatedNtfn match_alloc = 11;
  // Number of confirmations for the relevant escrow deposit (if applicable)
  uint32 confs = 12;
}

// Waiting Room Messages
message WaitingRoomsRequest {
  string room_id = 1;
}

message WaitingRoomsResponse {
  repeated WaitingRoom wr = 1;
}

message JoinWaitingRoomRequest {
  string room_id = 1;
  string client_id = 2;
  string escrow_id = 3; // optional
}

message JoinWaitingRoomResponse {
  WaitingRoom wr = 1;
}

message CreateWaitingRoomRequest {
  string host_id = 1;
  int64 betAmt = 2;
  string escrow_id = 3; // optional; server may auto-pick if empty
}

message CreateWaitingRoomResponse {
  WaitingRoom wr = 1;
}

message WaitingRoom {
  string id = 1;
  string host_id = 2;
  repeated Player players = 3;
  int64 bet_amt = 4;
}

message WaitingRoomRequest {
  string room_id = 1;
}

message WaitingRoomResponse {
  WaitingRoom wr = 1;
}

message Player {
  string uid = 1;
  string nick = 2;
  int64 bet_amt = 3;
  int32 number = 4;
  int32 score = 5;
  bool ready = 6;
}

// SignalReadyRequest contains information about the client signaling readiness
message StartGameStreamRequest {
  string client_id = 1;
}

message GameUpdateBytes {
  bytes data = 1;
}

message PlayerInput {
  string player_id = 1;
  string input = 2; // e.g., "ArrowUp", "ArrowDown"
  int32 player_number = 3; // player 1 or player 2.
}

message GameUpdate {
  double gameWidth = 13;
  double gameHeight = 14;
  double p1Width = 15;
  double p1Height = 16;
  double p2Width = 17;
  double p2Height = 18;
  double ballWidth = 19;
  double ballHeight = 20;

  int32 p1Score = 21;
  int32 p2Score = 22;

  double ballX = 1;
  double ballY = 2;
  double p1X = 3;
  double p1Y = 4;
  double p2X = 5;
  double p2Y = 6;

  double p1YVelocity = 7;
  double p2YVelocity = 8;
  double ballXVelocity = 9;
  double ballYVelocity = 10;

  double fps = 11;
  double tps = 12;

  // Optional: if you want to send error messages or debug information
  string error = 23;
  bool debug = 24;
}

message LeaveWaitingRoomRequest {
  string client_id = 1;
  string room_id = 2;
}

message LeaveWaitingRoomResponse {
  bool success = 1;
  string message = 2;
}

// SignalReadyToPlayRequest contains information about the client signaling readiness
message SignalReadyToPlayRequest {
  string client_id = 1;
  string game_id = 2;
}

// SignalReadyToPlayResponse contains the result of the ready signal
message SignalReadyToPlayResponse {
  bool success = 1;
  string message = 2;
}
